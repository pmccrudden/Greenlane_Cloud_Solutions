# Multi-stage build for optimized production deployment with ESM support

# Stage 1: Build stage
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Stage 2: Production stage
FROM node:20-alpine AS production

# Set working directory
WORKDIR /app

# Install curl for health checks and other essential tools
RUN apk add --no-cache curl

# Copy package files and install production dependencies only
COPY package*.json ./
RUN npm ci --omit=dev

# Copy built files from build stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/server ./server
COPY --from=builder /app/server-esm.js ./server-esm.js
COPY --from=builder /app/bootstrap.cjs ./bootstrap.cjs
COPY --from=builder /app/stripeConfig.json ./stripeConfig.json

# Copy all the TypeScript files that might be needed
COPY --from=builder /app/tsconfig.json ./tsconfig.json
COPY --from=builder /app/shared ./shared

# Set environment variables
ENV NODE_ENV=production
ENV PORT=8080
ENV HOST=0.0.0.0

# Health check configuration
HEALTHCHECK --interval=5s --timeout=10s --start-period=5s --retries=3 CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Using our pre-built bootstrap.js file for optimal startup time

# Use this ultra-minimal bootstrap script that starts immediately and then launches the real server
CMD ["node", "bootstrap.js"]